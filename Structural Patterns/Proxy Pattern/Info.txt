Definition:
	Provide a surrogate or placeholder for another object to control access to it.

Concept:
	You need to support this kind of design because, in many situations, direct 
	communication with an original object is not always possible. This is due to many 
	factors, including security and performance issues, resource constraints, the final 
	product is in the development phase, and so forth. Proxies can be of different types, 
	but fundamentally it is a substitute (or a placeholder) for an original object. As a result, 
	when a client interacts with a proxy object, it appears that it is directly talking to the 
	actual object. So, using this pattern, you may want to use a class that can perform as an 
	interface to the original one.

Example:
	In the real programming world, creating multiple instances of a complex object can 
	be costly because you may need resources that are not easily available or allocatable. 
	In such a situation, you can create multiple proxy objects that can point to the original 
	object. This mechanism can help you to save the computer/system memory and 
	improve the performance of your application.
	Another very common use of a proxy is seen when a user doesn’t want to disclose the 
	true IP address of his/her machine and make it anonymous.
	In WCF applications, you may notice WCF client proxies, which a client application 
	uses to communicate with the service. You can also configure a REST API to work behind 
	a proxy server to promote an authorized communication

Different types of proxies:
	• Remote proxies: These proxies can hide an object that sits in a different address space.
	• Virtual proxies: These proxies perform optimization techniques, such as creating a heavy object on an on-demand basis.
	• Protection proxies: These proxies generally deal with different access rights.
	• Smart reference: Performs additional housekeeping when a client accesses an object. A typical operation may include
		counting the number of references to an object at a certain moment in time.

	Sometimes a proxy implementation can have some similarities to a decorator, 
but you should not forget the true intent of a proxy. Decorators focus on adding 
responsibilities, whereas proxies focus on controlling access to an object. So, if you 
remember their purpose, in most cases, you can distinguish proxies from decorators.

Use cases:
	• You are writing test cases for a scenario that is still in the 
	development phase or very hard to reproduce. For example, when 
	you want to evaluate behavior in an application that can be seen 
	in a customer environment only, but you also recognize that when 
	the application is running, the probability of getting the behavior is 
	very low. In such a case, you can mimic the customer environment 
	behavior in your proxy object and execute your test cases to evaluate 
	the correctness of this behavior. You do not want your client to talk 
	directly to the target object.
	• You want to hide the complexity and enhance the security of the system.

Cons associated with proxies:
	• The overall response time can be an issue because you are not directly talking to the actual object.
	• You need to maintain additional layers for the proxies.
	• A proxy can hide the actual responses from objects, which may create confusion in some scenarios.